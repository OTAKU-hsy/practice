#include <iostream>
class Node {
    int id;
public:
    Node(int id) { this->id = id; }
    ~Node() { std::cout << id << ' '; }
};
class SmartPointer{
    Node* pointer;
    int* ref_cnt;

public:
    SmartPointer()
    {
        // 空指针
        pointer = nullptr;
        ref_cnt = nullptr;
    }
    SmartPointer(Node* p)
    {
        pointer = p;
        ref_cnt = new int(1);
    }

    // 需要完成的函数
    SmartPointer(const SmartPointer& sptr) {
        if (sptr.pointer == nullptr) {
            pointer = nullptr;
            ref_cnt = nullptr;
        }
        else {
            pointer = sptr.pointer;
            ref_cnt = sptr.ref_cnt;
            (*ref_cnt)++;
        }
    }
    void assign(const SmartPointer& sptr) { // 指针赋值，将sptr赋值给本指针
        if (sptr.pointer == nullptr) {
            if (pointer != nullptr) {
                (*ref_cnt)--;
                if ((*ref_cnt) == 0)
                    delete pointer;
            }
        }
        else if (sptr.pointer != pointer) {
            if (pointer != nullptr) {
                (*ref_cnt)--;
                if ((*ref_cnt) == 0)
                    delete pointer;
            }
            (*sptr.ref_cnt)++;
        }
        pointer = sptr.pointer;
        ref_cnt = sptr.ref_cnt;
    }  
    ~SmartPointer() {  // 析构函数，注意：为通过测试样例，需要保证析构函数可以被重复调用
        if (pointer != nullptr) {
            (*ref_cnt)--;
            if ((*ref_cnt) == 0)
                delete pointer;
        }
    } 
};
