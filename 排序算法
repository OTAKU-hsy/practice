#include<bits/stdc++.h>
using namespace std;

//归并排序
void merge(int a[], int l, int r) {
	int m = (l + r) / 2;
	int n = r - l + 1;
	int* b = new int[n];
	int k = 0, i = l, j = m + 1;
	while (i <= m && j <= r) {
		if (a[i] >= a[j])
			b[k++] = a[j++];
		else
			b[k++] = a[i++];
	}
	if (i == m + 1)
		while (j <= r)
			b[k++] = a[j++];
	else
		while (i <= m)
			b[k++] = a[i++];
	k = 0;
	for (int i = l; i <= r; i++)
		a[i] = b[k++];
	delete[]b;
}
void merge_sort(int a[], int low, int high) {
	if (low < high) {
		int i = (low + high) / 2;
		merge_sort(a, low, i);
		merge_sort(a, i + 1, high);
		merge(a, low, high);
	}
}

//冒泡排序
void bubble_sort(int a[],int l,int r) {
	int n = r - l, flag;
	for (int i = n; i > 0; i--) {
		flag = 0;
		for (int j = l; j < i; j++) {
			if (a[j] > a[j + 1]) {
				swap(a[j], a[j + 1]);
				flag = 1;
			}
		}
		if (flag == 0)
			return;
	}

}

//选择排序
void select_sort(int a[], int l, int r) {
	while (l < r) {
		int min = l, max = l;
		for (int i = l; i <= r; i++) {
			if (a[i] < a[min])
				min = i;
			if (a[i] > a[max])
				max = i;
		}
		if (min != l)
			swap(a[l], a[min]);
		if (max != r)
			swap(a[r], a[max]);
		l++, r--;
	}
}

//插入排序
void insert_sort(int a[], int l, int r) {
	if (r - l == 0)
		return;
	for (int i = l + 1; i <= r; i++) {
		int temp = a[i];
		int j = i - 1;
		for (; j >= 0; j--) {
			if (a[j] <= temp)
				break;
			a[j + 1] = a[j];
		}
		a[j + 1] = temp;
	}
}

//快速排序
int split(int a[], int l, int r) {
	int split_point = l;
	for (int i = l + 1; i <= r; i++)
		if (a[i] < a[l])
			swap(a[i], a[++split_point]);
	swap(a[l], a[split_point]);
	return split_point;
}
void quick_sort(int a[], int l, int r) {
	if (l < r) {
		int split_point = split(a, l, r);
		quick_sort(a, l, split_point - 1);
		quick_sort(a, split_point+1, r);
	}
}


int main() {
	int a[15] = { 1,2,5,4,9,8,7,6,3,10,14,13,12,11,0 };
	insert_sort(a, 0, 14);
	for (int i = 0; i < 15; i++)
		cout << a[i] << ' ';
	return 0;
}


