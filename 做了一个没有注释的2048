#include<bits/stdc++.h>
#include<windows.h>
using namespace std;
const int n = 4;
const int N = n * n;
int step;
int screen[n][n];
int row, column;
int count_0 = 16;
int new_place[16];
int current_score, history_score;

void print_screen();
void print_color(int a);
void start_game();
bool isContinue();
void random_place();
int random_num();
void turn_direction();
void translation(char x);
void turn(char x);
int end_game();

int main() {
Flag:
	start_game();
	do {
		random_place();
		print_screen();
		turn_direction();
		step++;
		system("cls");
	} while (isContinue());
	if (end_game())
		goto Flag;
	return 0;
}

void random_place() {
	int x = (rand() % INT_MAX) % count_0;
	screen[0][new_place[x]] = random_num();
}
int random_num() {
	srand((unsigned)time(NULL));
	int x = (rand() % INT_MAX) % 3;
	return (int)pow(2, x);
}
void print_screen() {
	cout << "----------------------------------------" << '\n';
	int count = 0;
	for (int i = 0; i < N; i++) {
		cout << "\t";
		print_color(screen[0][i]);
		count++;
		if (count * count == N) {
			cout << '\n';
			count = 0;
		}
	}
	cout<< "----------------------------------------" << '\n';
	cout << "目前已经行动次数：" << step << '\n';
	cout << "你的历史最高得分：" << history_score << '\n';
	cout << "你的目前得分：" << current_score << '\n';
	cout << "输入wasd来控制方向：";
}
void print_color(int a) {
	if (a == 0) cout << a;
	else if (a < 4) printf("\033[0m\033[1;36m%d\033[0m", a);//cyan
	else if (a < 32) printf("\033[0m\033[1;34m%d\033[0m", a);//blue
	else if (a < 128) printf("\033[0m\033[1;35m%d\033[0m", a);//purple
	else if (a < 600)printf("\033[0m\033[1;33m%d\033[0m", a);//yellow
	else if (a < 1000) printf("\033[0m\033[1;32m%d\033[0m", a);//green
	else if (a < 2000) printf("\033[0m\033[1;31m%d\033[0m", a);//red
}
void start_game() {
	for (int i = 0; i < N; i++)
		screen[0][i] = 0;
	history_score = max(current_score, history_score);
	current_score = 0;
	cout << "________   _______       _____     ______" << endl
		 << "\\_____  \\  \\   _  \\     /  |  |   /  __  \\ " << endl
		 << " / _ ___/  /  /_\\  \\   /   |  |_  >      <" << endl
		 << "/       \\  \\  \\_/   \\ /    ^   / /   --   \\ " << endl
		 << "\\_______ \\  \\_____  / \\____   |  \\______  /" << endl
		 << "	\\/        \\/       |__|         \\/ " << endl;
	Sleep(300);
	cout << "历史最高得分：";
	cout << history_score;
	cout << '\n';
	system("pause");
	system("cls");
}
bool isContinue() {
	count_0 = 0;
	for (int i = 0; i < N; i++) {
		if (screen[0][i] == 2048)
			return 0;
		if (screen[0][i] == 0)
			new_place[count_0++] = i;
	}
	if (count_0 == 0)
		return 0;
	return 1;
}
void turn_direction() {
Flag:
	char a;
	cin >> a;
	if (a == 'w' || a == 'a' || a == 's' || a == 'd')
		turn(a);
	else
		goto Flag;
}
void turn(char x) {
	switch (x) {
	case 'w':
		for (column = 0; column < n; column++) {
			translation('w');
			for (row = 1; row < n; row++) {
				if (screen[row - 1][column] == screen[row][column] && screen[row][column] != 0) {
					screen[row - 1][column] *= 2;
					screen[row][column] = 0;
					current_score += screen[row - 1][column];
					translation('w');
					row = 0;
				}
			}
			translation('w');
		}
		break;
	case 'a':
		for (row = 0; row < n; row++) {
			translation('a');
			for (column = 1; column < n; column++) {
				if (screen[row][column - 1] == screen[row][column] && screen[row][column] != 0) {
					screen[row][column - 1] *= 2;
					screen[row][column] = 0;
					current_score += screen[row][column - 1];
					translation('a');
					column = 0;
				}
			}
			translation('a');
		}
		break;
	case 's':
		for (column = 0; column < n; column++) {
			translation('s');
			for (row = 1; row < n; row++) {
				if (screen[row - 1][column] == screen[row][column] && screen[row][column] != 0) {
					screen[row][column] *= 2;
					screen[row - 1][column] = 0;
					current_score += screen[row][column];
					translation('s');
					row = 0;
				}
			}
			translation('s');
		}
		break;
	case 'd':
		for (row = 0; row < n; row++) {
			translation('d');
			for (column = 1; column < n; column++) {
				if (screen[row][column - 1] == screen[row][column] && screen[row][column] != 0) {
					screen[row][column] *= 2;
					screen[row][column - 1] = 0;
					current_score += screen[row][column];
					translation('d');
					column = 0;
				}
			}
			translation('d');
		}
		break;
	}
}
void translation(char x) {
	switch (x) {
	case 'w':
		for (row = 1; row < n; row++) {
			if (screen[row - 1][column] == 0 && screen[row][column] != 0) {
				swap(screen[row - 1][column], screen[row][column]);
				row = 0;
			}
		}
		break;
	case 'a':
		for (column = 1; column < n; column++) {
			if (screen[row][column - 1] == 0 && screen[row][column] != 0) {
				swap(screen[row][column - 1], screen[row][column]);
				column = 0;
			}
		}
		break;
	case 's':
		for (row = 1; row < n; row++) {
			if (screen[row][column] == 0 && screen[row - 1][column] != 0) {
				swap(screen[row - 1][column], screen[row][column]);
				row = 0;
			}
		}
		break;
	case 'd':
		for (column = 1; column < n; column++) {
			if (screen[row][column - 1] != 0 && screen[row][column] == 0) {
				swap(screen[row][column - 1], screen[row][column]);
				column = 0;
			}
		}
		break;
	}
}
int end_game() {
	int a = 0;
	for (int i = 0; i < N; i++) {
		if (screen[0][i] == 2048) {
			a = 1;
			break;
		}
	}
	if (a) cout << "winwinwin" << '\n';
	else for (int i = 0; i < 5; i++) {
			cout << "菜就多练，输不起就别玩" << "\n";
			Sleep(500);
		 }
	Sleep(2000);
	cout << "你的最终得分是：";
	cout << current_score << '\n';
	cout << "扣1重开，扣0结束：";
	cin >> a;
	system("cls");
	return a;
}
